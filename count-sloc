#!/bin/bash

#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#	C/C++ SLOC Counter
#	Copyright 2014 Chris Foster <cdbfoster@gmail.com>

#	Usage:
#	count-sloc [FILE...]
#
#	When files are not specified, count-sloc finds any appropriate files in the current
#	directory


# Grab the last 48 characters of the first argument and replace anything before the first
# "/" with "...".  In this way, no formatted path can ever exceed 50 characters.
function format-item {
	echo "${1: -48}" | sed -e "0,/.[^/]*/{s/.[^/]*/.../}"
}

# Counts all lines in the file specified by the first argument that are not within a block
# comment, that are not blank, and that don't start with "//".
function line-count {
	echo $(cat $1 | sed -e "/^\/\*/,/\*\/$/d" -e "/^\s*$\|^\s*\/\//d" | wc -l)
}

# Print the first two arguments in nice columns.
function print-line {
	echo $1 $2 | awk '{printf " %-50s | %4s\n", $1, $2}'
}

# If no file is provided, get the files (.h, .c, .hpp, or .cpp) in the current directory.
if [ $# == 0 ]; then
	files=($(find -regex "^.*\.\(h\|c\|hpp\|cpp\)$" | sed -e "s/\.\///"))
else
	files=($(find $@))
fi

print-line "Files" "SLOC"
echo "-----------------------------------------------------------"

total_lines=0

for item in ${files[*]}
do
	# Chop long file names
	if [ ${#item} -gt 50 ]; then
		print_item=$(format-item "$item")
	else
		print_item="$item"
	fi
	
	# Get the number of SLOC for the file
	lines=$(line-count "$item")
	
	print-line "$print_item" $lines
	
	((total_lines=total_lines+lines))
done

echo "-----------------------------------------------------------"
echo "Total SLOC: $total_lines"

